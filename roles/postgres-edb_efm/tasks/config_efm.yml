---

- name: entry for efm in pg_hba file
  blockinfile:
    path: "{{ PGDATA }}/pg_hba.conf"
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR EFM"
    block: |
      {% for node_ip in efm_nodes_ips %}
      host postgres {{ EFM_USER }} {{ node_ip }}/32 md5
      {% endfor %}
  notify: reload postgres

- meta: flush_handlers

- name: efm.nodes file
  blockinfile:
    path: "/etc/edb/efm-{{ EFM_VERSION }}/efm.nodes"
    block: |
      {% for node_ip in efm_nodes_ips %}
      {{ node_ip }}:7800
      {% endfor %}
  notify: restart efm

- name: get encrypted password
  shell: /usr/edb/efm-{{ EFM_VERSION }}/bin/efm encrypt efm --from-env
  environment:
    EFMPASS: '{{ EFM_USER_PASSWORD }}'
  register: pass_opt
  check_mode: no
  changed_when: false

- name: configure efm.properties  
  lineinfile:
    path: "/etc/edb/efm-{{ EFM_VERSION }}/efm.properties"
    regexp: "{{ item.name + '=' }}"
    line: "{{ item.name + '=' + item.value|string }}"
    state: present
  with_items:
    - { name: db.user, value: "{{ EFM_USER }}" }
    - { name: db.password.encrypted, value: "{{ pass_opt.stdout }}" }
    - { name: db.port, value: "5432" }
    - { name: db.database, value: "postgres" }
    - { name: db.service.owner, value: "postgres" }
    - { name: db.service.name, value: "postgresql-{{ PGVER }}" }
    - { name: db.data.dir, value: "{{ PGDATA }}" }
    - { name: db.recovery.dir, value: "{{ PGDATA }}" }
    - { name: user.email, value: "{{ NOTIFICATION_EMAIL }}" }
    - { name: is.witness, value: false }
    - { name: auto.allow.hosts, value: true }
    - { name: stable.nodes.file, value: true }
    - { name: db.bin, value: "/usr/pgsql-{{ PGVER }}/bin" }
    - { name: bind.address, value: "{{ ansible_default_ipv4.address }}:7800" }
    - { name: primary.shutdown.as.failure, value: true }
    - { name: ping.server.ip, value: "{{ ansible_default_ipv4.gateway }}" }
    - { name: auto.resume.period, value: 10 }
    - { name: application.name, value: "{{'node'+pg_repl_id|string}}" }
    - { name: update.physical.slots.period, value: "10" }
  notify: restart efm

- name: configure vip in efm.properties
  lineinfile:
    path: "/etc/edb/efm-{{ EFM_VERSION }}/efm.properties"
    regexp: "{{ item.name + '=' }}"
    line: "{{ item.name + '=' + item.value|string }}"
  with_items:
    - { name: virtual.ip, value: "{{ EFM_VIP }}" }
    - { name: virtual.ip.interface, value: "{{ ansible_default_ipv4.interface }}" }
    - { name: virtual.ip.prefix, value: 24 }
  notify: restart efm
  when: EFM_VIP is defined